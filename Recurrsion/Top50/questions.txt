
Q1 You are given an integer n. Print numbers from 1 to n without the help of loops.
Ans : intution : 

The last call before hitting the base case is what triggers the “unwinding” of the recursion.
All the earlier calls are paused, waiting for the inner calls to finish.
Once the base case is reached, each paused call resumes in reverse order, executing the System.out.println (or print) statements.
For n = 10:
      printAscending(10) → waits
              printAscending(9) → waits
                        printAscending(1) → calls printAscending(0) → base case reached → returns
        

          Now printAscending(1) prints 1
          Then printAscending(2) prints 2
              …

Finally, printAscending(10) prints 10

Part 2 : Deceding way 
                  Tail recursion: you do the action before the recursive call.
                  This means the current number is printed immediately, and the recursive call handles the smaller problem afterward.
      In tail recursion / descending order:
            There’s no priority given to the recursive call.
            The function first executes whatever comes first in the code — in this case, System.out.print(n).
            Only after printing does it make the recursive call to handle the smaller problem (n-1).

Q.2 . Print n to 1 without loop
- > You are given an integer n. Print numbers from n to 1 without the help of loops.

Q3 Recursion Use it and find the mean of the array: => 
==>> 
Input: 1 2 3 4 5
Output: 3
Explanation: The sum of elements (15) divided by the number of elements (5) gives the mean: 3
: intution neeed the sum first then divide by the total number of element 

Q4 Find the sum of firest N numbers using recursion 
      Intution: First cheack the base case if the base case hit then return otherwise untill an dunless call the functinon recursively and try to get the sum for the sum of that index and less than that one more 

Q5 find the Binray form from decimal : 

Intution is easy use the logic of recurrsion which syas in the base case if n==0 then return 
      otherwise call function and say dectoBinary(n/2) ==> everytime half : go to the base case then prind the reminder 
                                          system.out.println(n%2) .. here the Binary form goes ..

Q6 : Sum of array elements using recursion
    // Base case: no elements
        if (n == 0) {
            return 0;
        }
        // Recursive case: sum last element + sum of remaining elements
        return arr[n - 1] + sumArray(arr, n - 1);


Q7 : Print reverse of a string using recursion

Q8 : Find Length of a String Using Recursion
Instead of using built-in functions like .length(), we can determine the length of a string by counting characters one by one through recursion.
The idea is simple:

 Base case:        If the string is empty, its length is 0.
 Recursive case:     Count 1 for the first character, then recursively count the length of the rest of the string                                by calling the function on str.substring(1).
                  This continues until the string becomes empty, and the recursive calls add up to give the total length.
Problem Name:
Q10  Sum of Digits of a Number Using Recursion? 
Intution : 
       first cheack the base case if digit ==0 then return 0 otherwise get the last digit by taking modulus and sum up with the division by getting the last digit and recurrsively it goes untill it hits the base case . 

Q11 What is Tail recurrsion ?

      Tail Recursion is a special form of recursion where the recursive call is the last operation executed in the function.
No pending computation is left after the recursive call returns. This allows the compiler/runtime (if it supports Tail Call Optimization, TCO) to reuse the current function’s stack frame instead of creating a new one.

      As a result, tail recursion can achieve the time efficiency of recursion with the space efficiency of iteration.
Q12 ..Find the first n Fibonacci numbers?
      here we use this formula Internally >>
            F(n)=F(n−1)+F(n−2)

Q13: Find the Factorial of a Number? 
                              Compute the factorial of a number n:
                                    n!=n×(n−1)×(n−2)×⋯×1            
                              Example: 5! = 5 × 4 × 3 × 2 × 1 = 120
