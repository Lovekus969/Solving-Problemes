
Q1 You are given an integer n. Print numbers from 1 to n without the help of loops.
Ans : intution : 

The last call before hitting the base case is what triggers the “unwinding” of the recursion.
All the earlier calls are paused, waiting for the inner calls to finish.
Once the base case is reached, each paused call resumes in reverse order, executing the System.out.println (or print) statements.
For n = 10:
      printAscending(10) → waits
              printAscending(9) → waits
                        printAscending(1) → calls printAscending(0) → base case reached → returns
        

          Now printAscending(1) prints 1
          Then printAscending(2) prints 2
              …

Finally, printAscending(10) prints 10

Part 2 : Deceding way 
                  Tail recursion: you do the action before the recursive call.
                  This means the current number is printed immediately, and the recursive call handles the smaller problem afterward.
      In tail recursion / descending order:
            There’s no priority given to the recursive call.
            The function first executes whatever comes first in the code — in this case, System.out.print(n).
            Only after printing does it make the recursive call to handle the smaller problem (n-1).

Q.5 . Print n to 1 without loop
- > You are given an integer n. Print numbers from n to 1 without the help of loops.
