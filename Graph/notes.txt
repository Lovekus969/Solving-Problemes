What is a Graph in DSA?
    A graph is a data structure that consists of:
    Vertices (nodes) â†’ represent entities.
    Edges (links) â†’ represent relationships between nodes.

Formally, a graph is represented as:
                                 G = (V, E)
where:
        V = set of vertices
        E = set of edges

ðŸ“Œ Types of Graphs

Types of Graphs

    Directed vs Undirected
                            Directed: edges have direction (A â†’ B).
                            Undirected: edges are bidirectional (A â€” B).

Weighted vs Unweighted
                            Weighted: edges have costs/weights (like distance).
                            Unweighted: all edges have same weight.
                            
Cyclic vs Acyclic
                            Cyclic: contains at least one cycle.
                            Acyclic: no cycles (e.g., DAG â†’ Directed Acyclic Graph).

Connected vs Disconnected
                            Connected: there is a path between every pair of nodes.
                            Disconnected: some nodes cannot be reached from others=


Graph Representation

Graphs are usually stored in two main ways:
                                                Adjacency Matrix :=>>     A 2D array where matrix[u][v] = 1 (or weight) if an edge exists.
            Easy to check edge existence.
                Space: O(V^2).
    Adjacency List
                        Each node stores a list of its neighbors.
        Space efficient for sparse graphs.
                                            Space: O(V + E).
ðŸ‘‰ In coding interviews, adjacency list is more common.
        Graph Traversal Algorithms
                                                            BFS (Breadth-First Search)

                    Uses queue(BFS)
                                        Explores level by level.
                                        Good for shortest path in unweighted graphs.
                                                            
                                                            DFS (Depth-First Search)                    
                                        
                                        Uses stack (or recursion)
                                        Goes as deep as possible before backtracking.
                                        Used in cycle detection, path finding, topological sorting.
        What is DFS (Depth-First Search)?

DFS is a graph/tree traversal algorithm.
It explores as far as possible along one branch before backtracking.

DFS = exploring a maze by going as far as possible down one path before trying another.

BFS = exploring a maze layer by layer, like spreading outward in waves.
